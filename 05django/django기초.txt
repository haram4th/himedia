1. django-admin startproject <프로젝트 이름> eg.django_test
2. python manage.py startapp <앱 이름> eg.minipjs
3. django_test 폴더 안의 settings.py => INSTALLED_APPS에 앱 등록하기
    'minipjs'
4. django_test 폴더 안의 urls.py 에 include를 이용해 minipjs.urls 등록하기
   from django.contrib import admin
   from django.urls import path, include

   urlpatterns = [
         path('admin/', admin.site.urls),
         path('', include("minipjs.urls"))
   ]
   
   => 서버가 실행되면 접속되는 메인 화면과 다른 페이지를 minipjs.urls에서 관리

5. minipjs 폴더에 urls.py 파일 생성
   from django.urls import path
   from . import views  # url을 받아 이동할 view의 함수를 불러옴
   
   app_name = 'minipjs'   # 꼭 생성한 앱과 동일한 이름으로 적어주어야 함

   urlpatterns = [
       path('', views.main, name='main'),   # 메인페이지 접속시 경로

       ]
    # 127.0.0.1:8000으로 접속시 view.py 의 def main으로 보내라는 의미
    # 아직 views.py에 main 함수가 없으므로 만들어야 함.
    # name='main'은 나중에 html 파일에서 다시 이 경로로 이동할 때 사용하는 이름

6. views.py에 main 함수 만들기
from django.shortcuts import render

def main(request):
    return render(request, "main.html")

# 첫 접속 화면이므로 메인 페이지 html을 띄워주면 됨
# render(request, "메인 페이지 이름") 으로 적어줌
# 여기서 이동시키는 html 파일은 minipjs 디렉토리 안에 templates 디렉토리에
   있어야 함

7. 서버 실행시 첫 화면인 main 페이지를 만들기 위한 준비
  1) minipjs 디렉토리 안에 templates 디렉토리 생성 => django는 html 파일을 여기서 찾음
  2) minipjs 디렉토리 안에 static 디렉토리 생성 => django는 css 파일 혹은 다른 파일을 여기서 찾음

8. templates 디렉토리에 main.html 파일 생성후 아래의 내용 입력
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>미니프로젝트 메인</title>
</head>
<body>
    <h1>Django Mini Projects</h1>

    <div>1. calculator</div>
    <div>2. naver_book_search</div>
    <div>3. minipj</div>
    <div>4. minipj</div>
    <div>5. minipj</div>
</body>
</html>

저장

9. vs code의 터미널에서 python manage.py runserver 실행 후 localhost:8000으로 접속
   main.html 페이지가 잘 보이면 성공

10. migration 관련 warning이 나오면 python manage.py migrate 를 실행해 주고 
     python manage.py runserver 실행 후 localhost:8000으로 접속
     main.html 페이지가 잘 보이면 성공

11. main.html에 메뉴 1번에 calculator 기능 으로 링크 걸기 
   <div>1. calculator</div>  를 아래와 같이 수정
   <div><a href="/calculator">1. calculator</a></div>
   => 1.calculator를 누르면 localhost:8000/calculator로 이동
   => 아직 urls.py에 calculator가 없으므로 등록

12. minipjs - urls.py 에 calculator 등록
     from django.urls import path
     from . import views

     app_name = 'minipjs'

    urlpatterns = [
          path('', views.main, name='main'),
          path('calculator', views.calculator, name='calculator'),
    ]
    => html에서 /calculator 로 가라고 한 것을 path에 'calculator'로 등록
    => 웹브라우저에서 127.0.0.1:8000/calculator 로 요청했을 때 보여줄 페이지 필요
    => 그 보여줄 페이지를 views.py 에 def calculator로 만들어야 함
    => name='calculator' 는 나중에 html 파일에서 다시 path('calculator', views.calculator, name='calculator')
        경로로 이동해야 할때 사용하기 쉽게 이름 부여

13. minipjs - views.py 에 def calculator 생성
def calculator(request):
    return render(request, 'calc/calculator.html')
# 127.0.0.1:8000/calculator 로 요청이 오면
# minipjs/templates/calc/calculator.html 로 연결하라는 의미
# 아직 calc 디렉토리도 없고 calculator.html도 없으므로 minipjs/templates에 생성
# calc 디렉토리 생성
# calc 디렉토리 안에 calculator.html 생성 후 아래 내용 추가
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>calc_from.html</title>
</head>
<body>
<h1> 사칙연산 프로그램 Django </h1>
<form action="/calculator" method="POST">  # 숫자와 연산자를 입력받아 /calculaor 로 보냄
    {% csrf_token %}
    <input type="text" name="num1">
    <select name="oper">
        <option value="+">+</option>
        <option value="-">-</option>
        <option value="*">*</option>
        <option value="/">/</option>
    </select>
    <input type="text" name="num2">
    <input type="submit" value="계산하기">

</form>
</body>
</html>

# 숫자와 연산자를 입력받아 /calculator 로 보냄
# name은 변수명임
# 따라서 num1, oper, num2 변수에 값을 담아서 POST 방식으로 /calculator로 보냄
# 계산하기 버튼을 누르면 minipjs 의 urls.py에서 'calculator'를 찾아감
# urls.py 에는 path('calculator', views.calculator, name='calculator')
# calculator로 오면 views.py의 calculator 함수로 가게 되어 있으니 views.py로 가자
# views.py의 calculator에는 현재 calc/calculator.html 페이지를 보여주는 기능만 있으므로 
  계산기 기능을 추가하자.

14. views.py의 def calculator에 계산기 기능 추가
def calculator(request):   # request는 html 파일에 있는 모든 것을 가져옴
    if request.method == 'POST':   # html에서 POST 방식으로 보낸 자료가 있는지 확인
        num1 = int(request.POST.get('num1'))  # calculator.html 에서 보낸 변수 num1를 받아 int로 변환 후 num1에 저장
        num2 = int(request.POST.get('num2'))  # calculator.html 에서 보낸 변수 num2를 받아 int로 변환 후 num2에 저장
        oper = request.POST.get('oper')  # calculator.html 에서 보낸 변수 oper를 받아 oper 에 저장

        if oper == '+':
            result = num1 + num2
        elif oper == '-':
            result = num1 - num2
        elif oper == '*':
            result = num1 * num2
        elif oper == '/':
            if num2 != 0:
                result = num1 / num2
            else:
                result = 'Cannot divide by zero'
        else:
            result = 'Invalid operation'

        context = {'result': result, 'num1': num1, 'num2' : num2, 'oper' : oper}        

        return render(request, 'calc/calculator.html', context=context) # 계산 결과를 result 라는 변수에 담아서 calc/calculator.html로 보냄 (딕셔너리 형태로 보냄)

    return render(request, 'calc/calculator.html')
# 리턴이 두개인 이유는 POST로 자료가 들어오지 않았을 때는 숫자를 입력받을 페이지를 출력해야 하기 때문
# POST로 자료가 들어오면 (if request.method == 'POST': 가 Ture) 계산 후 결과값context에 담아 calc/calculator.html로 보냄
# calculator.html에 아직 결과를 출력하는 곳을 만들지 않았으므로 내용 수정필요

15. calculator.html 아래에 계산 결과 출력 부분 추가

<p> 계산 결과: {{num1}}{{oper}}{{num2}} = {{result}} </p>

# views.py 에서 context에 담아 보낸 딕셔너리의 키를 {{ }}안에 적어주면 내용 출력 됨

16. calculator에서 빠져나가 main 페이지로 가기 위해서 urls.py의 main으로 가는 링크 추가

<a href="{% url 'minipjs:main' %}">Main으로 돌아가기</a>
# minipjs 아래 있는 urls.py에 지정한 name main을 호출하기 위해
{% url 'minipjs:main' %} 형식으로 링크 주소를 적어 줌.

